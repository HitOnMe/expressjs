generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model food {
  type_id   Int?
  food_id   Int        @id @default(autoincrement())
  food_name String?    @db.VarChar(255)
  image     String?    @db.VarChar(255)
  price     Float?     @db.Float
  desc      String?    @db.VarChar(255)
  food_type food_type? @relation(fields: [type_id], references: [type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_food")
  order     order[]    @ignore
  sub_food  sub_food[]

  @@index([type_id], map: "fk_food")
}

model food_type {
  type_id   Int     @id @default(autoincrement())
  type_name String? @db.VarChar(255)
  food      food[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model like_res {
  user_id    Int?
  res_id     Int?
  date_like  DateTime?   @db.DateTime(0)
  restaurant restaurant? @relation(fields: [res_id], references: [res_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_res")
  user       user?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@index([res_id], map: "fk_res")
  @@index([user_id], map: "fk_user")
  @@ignore
}

model likeres {
  id           Int          @id @default(autoincrement())
  date_like    DateTime     @db.DateTime(0)
  createdAt    DateTime     @db.DateTime(0)
  updatedAt    DateTime     @db.DateTime(0)
  UserId       Int?
  RestaurantId Int?
  users        users?       @relation(fields: [UserId], references: [id], map: "likeres_ibfk_1")
  restaurants  restaurants? @relation(fields: [RestaurantId], references: [id], map: "likeres_ibfk_2")

  @@index([RestaurantId], map: "RestaurantId")
  @@index([UserId], map: "UserId")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model order {
  user_id    Int?
  food_id    Int?
  amount     Int?
  code       String? @db.VarChar(255)
  arr_sub_id String? @db.VarChar(255)
  food       food?   @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_foodOrder")
  user       user?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userOrder")

  @@index([food_id], map: "fk_foodOrder")
  @@index([user_id], map: "fk_userOrder")
  @@ignore
}

model orders {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @db.DateTime(0)
  updatedAt  DateTime @db.DateTime(0)
  amount     Int
  arr_sub_id String?  @db.VarChar(255)
  code       String   @db.VarChar(255)
  UserId     Int?
  users      users?   @relation(fields: [UserId], references: [id], map: "Orders_UserId_foreign_idx")

  @@index([UserId], map: "Orders_UserId_foreign_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model rate_res {
  user_id    Int?
  res_id     Int?
  amount     Int?
  date_rate  DateTime?   @db.DateTime(0)
  restaurant restaurant? @relation(fields: [res_id], references: [res_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_resRate")
  user       user?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userRate")

  @@index([res_id], map: "fk_resRate")
  @@index([user_id], map: "fk_userRate")
  @@ignore
}

model rateres {
  id           Int          @id @default(autoincrement())
  amount       Int
  date_rate    DateTime     @db.DateTime(0)
  createdAt    DateTime     @db.DateTime(0)
  updatedAt    DateTime     @db.DateTime(0)
  UserId       Int?
  RestaurantId Int?
  users        users?       @relation(fields: [UserId], references: [id], map: "rateres_ibfk_1")
  restaurants  restaurants? @relation(fields: [RestaurantId], references: [id], map: "rateres_ibfk_2")

  @@index([RestaurantId], map: "RestaurantId")
  @@index([UserId], map: "UserId")
}

model restaurant {
  res_id   Int        @id @default(autoincrement())
  res_name String?    @db.VarChar(255)
  image    String?    @db.VarChar(255)
  desc     String?    @db.VarChar(255)
  like_res like_res[] @ignore
  rate_res rate_res[] @ignore
}

model restaurants {
  id        Int       @id @default(autoincrement())
  res_name  String    @db.VarChar(255)
  image     String?   @db.VarChar(255)
  desc      String?   @db.VarChar(255)
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  likeres   likeres[]
  rateres   rateres[]
}

model sub_food {
  food_id   Int?
  sub_id    Int     @id @default(autoincrement())
  sub_name  String? @db.VarChar(255)
  sub_price Float?  @db.Float
  food      food?   @relation(fields: [food_id], references: [food_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sub")

  @@index([food_id], map: "fk_sub")
}

model user {
  user_id   Int        @id @default(autoincrement())
  full_name String?    @db.VarChar(255)
  email     String?    @db.VarChar(255)
  password  String?    @db.VarChar(255)
  like_res  like_res[] @ignore
  order     order[]    @ignore
  rate_res  rate_res[] @ignore
}

model users {
  id        Int       @id @default(autoincrement())
  full_name String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  password  String    @db.VarChar(255)
  createdAt DateTime  @db.DateTime(0)
  updatedAt DateTime  @db.DateTime(0)
  likeres   likeres[]
  orders    orders[]
  rateres   rateres[]
}
